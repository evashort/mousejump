using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using System.Collections.ObjectModel;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MouseJumpSettings.Views
{
    public sealed partial class Labels : Page
    {
        // https://docs.microsoft.com/en-us/windows/apps/design/controls/tree-view#tree-view-using-data-binding
        private ObservableCollection<Item> DataSource = new ObservableCollection<Item>();
        private int Priority { get; set; }
        private double Weight { get; set; }

        public Labels()
        {
            this.InitializeComponent();
            DataSource = GetData();
        }

        private ObservableCollection<Item> GetData()
        {
            return new ObservableCollection<Item>
            {
                new Item
                {
                    Name = "main",
                    Operation = Operation.Merge,
                    Children = new ObservableCollection<Item>
                    {
                        new Item
                        {
                            Name = "letters",
                            Operation = Operation.Literal,
                            Weight = 1,
                        },
                        new Item
                        {
                            HasSeparator = true,
                            Name = "numbers",
                            Operation = Operation.Difference,
                            Weight = 2,
                        },
                    },
                },
                new Item
                {
                    Name = "unused",
                    Operation = Operation.Join,
                },
                new Item
                {
                    Name = "New sequence",
                    Operation = Operation.New,
                },
            };
        }
    }

    public enum Operation
    {
        Literal,
        Merge,
        Join,
        Difference,
        New,
    }

    public class Item
    {
        public string Name { get; set; }
        public Operation Operation { get; set; }
        public string PathData
        {
            get
            {
                // https://docs.microsoft.com/en-us/windows/apps/design/style/segoe-fluent-icons-font
                // Edit > Select All
                // Path > Object to Path
                // order is important here because Object to Path can convert objects to stroked paths
                // Path > Stroke to Path
                // Path > Union
                // https://github.com/Klowner/inkscape-applytransforms
                // Extensions > Modify Path > Apply Transform
                return Operation switch
                {
                    Operation.Literal => "M 11.5,1 a 0.5,0.5 0 0 1 0,1 H 0.5 a 0.5,0.5 0 0 1 0,-1 Z M 15.5,7 a 0.5,0.5 0 0 1 0,1 H 0.5 a 0.5,0.5 0 0 1 0,-1 Z M 10.5,13 a 0.5,0.5 0 0 1 0,1 H 0.5 a 0.5,0.5 0 0 1 0,-1 Z",
                    Operation.Merge => "M 6.8300781,6.9726562 A 0.5,0.5 0 0 0 6.1640625,7.2089844 0.5,0.5 0 0 0 6.4003906,7.875 c 2.8524223,1.3584083 5.9425534,2.191143 8.9921874,2.863281 A 0.5,0.5 0 0 0 15.988281,10.357422 0.5,0.5 0 0 0 15.607422,9.7617188 C 12.58879,9.096413 9.5720712,8.2784749 6.8300781,6.9726562 Z M 8.5703125,3.0546875 A 0.5,0.5 0 0 0 8.203125,3.1660156 C 5.9215592,5.0281273 2.5694784,6.8976627 0.31640625,7.7851562 a 0.5,0.5 0 0 0 -0.28125,0.6484376 0.5,0.5 0 0 0 0.6484375,0.28125 C 3.0640967,7.7771547 6.4390072,5.8957202 8.8359375,3.9394531 A 0.5,0.5 0 0 0 8.90625,3.2363281 0.5,0.5 0 0 0 8.5703125,3.0546875 Z M 8.2128906,0.00390625 A 0.5,0.5 0 0 0 7.8457031,0.109375 0.5,0.5 0 0 0 7.7695312,0.8125 c 1.9245137,2.3947713 4.9087748,4.7581182 7.5703128,5.6601562 a 0.5,0.5 0 0 0 0.632812,-0.3125 0.5,0.5 0 0 0 -0.3125,-0.6328125 C 13.296987,4.7264277 10.353829,2.4335553 8.5488281,0.1875 A 0.5,0.5 0 0 0 8.2128906,0.00390625 Z M 6,14 A 0.5,0.5 0 0 0 5.5,14.5 0.5,0.5 0 0 0 6,15 h 9.5 A 0.5,0.5 0 0 0 16,14.5 0.5,0.5 0 0 0 15.5,14 Z M 9.7265625,10.738281 C 6.700471,11.242022 3.2029003,11.783929 0.4375,12.128906 A 0.5,0.5 0 0 0 0.00390625,12.6875 0.5,0.5 0 0 0 0.5625,13.121094 c 2.7900142,-0.348048 6.2933615,-0.8913 9.328125,-1.396485 a 0.5,0.5 0 0 0 0.412109,-0.574218 0.5,0.5 0 0 0 -0.5761715,-0.41211 z",
                    Operation.Join => "M 0.999938,1.50016 C 0.447701,1.5002 3.37071e-5,1.94787 0,2.5001 3.36633e-5,3.05234 0.447701,3.50001 0.999938,3.50004 1.55217,3.50001 1.99984,3.05234 1.99988,2.5001 1.99984,1.94787 1.55217,1.5002 0.999938,1.50016 Z m 14.000162,0 c -0.5522,4e-5 -0.9999,0.44771 -0.9999,0.99994 0,0.55224 0.4477,0.99991 0.9999,0.99994 C 15.5523,3.50001 16,3.05234 16,2.5001 16,1.94787 15.5523,1.5002 15.0001,1.50016 Z M 3.99975,1.99988 C 3.86706,1.99981 3.73979,2.0525 3.64597,2.14632 3.55215,2.24015 3.49946,2.36742 3.49952,2.5001 c -6e-5,0.13269 0.05263,0.25996 0.14645,0.35378 0.09382,0.09383 0.22109,0.14651 0.35378,0.14645 h 7.56745 c 0.0021,0.01362 0.0035,0.02723 0.0057,0.04082 C 10.0766,4.01967 8.99872,5.52837 8.00053,7.07191 7.42253,6.17302 6.82115,5.28159 6.12572,4.49998 H 4.71805 C 5.72035,5.4188 6.5632,6.6792 7.40677,7.99898 6.27975,9.76271 5.15559,11.4224 3.64835,12.301 3.40977,12.44 3.32903,12.7461 3.468,12.9847 3.607,13.2233 3.91308,13.304 4.15168,13.1651 6.01505,12.0788 7.22197,10.1549 8.40051,8.30284 8.41575,8.28238 8.42939,8.26079 8.44133,8.23825 9.62086,6.38552 10.7787,4.61463 12.3553,3.69693 12.5504,3.58319 12.6451,3.35276 12.5863,3.13469 12.5301,2.92685 12.5013,2.71229 12.5,2.497 12.4984,2.22191 12.2749,1.99977 11.9998,1.99988 Z M 9.50018,9.36841 C 9.31299,9.66404 9.1234,9.96334 8.92554,10.2671 c 0.75891,1.0284 1.60706,1.9666 2.65256,2.6546 -0.0045,0.0259 -0.0058,0.0525 -0.0098,0.0785 H 6.79027 c -0.35828,0.3562 -0.74686,0.6926 -1.17408,1 h 6.38361 c 0.2747,10e-5 0.498,-0.2214 0.5002,-0.4961 0.0013,-0.2153 0.0296,-0.4309 0.0858,-0.6388 0.0591,-0.2181 -0.0353,-0.4488 -0.2305,-0.5627 C 11.2471,11.6575 10.3474,10.5882 9.50018,9.36841 Z M 0.999938,12.5 C 0.447701,12.5 3.36925e-5,12.9477 0,13.4999 c 3.38386e-5,0.5523 0.447701,0.9999 0.999938,1 0.552232,-10e-5 0.999902,-0.4477 0.999942,-1 C 1.99984,12.9477 1.55217,12.5 0.999938,12.5 Z m 14.000162,0 c -0.5522,0 -0.9999,0.4477 -0.9999,0.9999 0,0.5523 0.4477,0.9999 0.9999,1 C 15.5523,14.4998 16,14.0522 16,13.4999 16,12.9477 15.5523,12.5 15.0001,12.5 Z",
                    Operation.Difference => "m 10.007812,9.3203125 c 5.9e-4,-0.3151824 0.06104,-0.5524249 0.08594,-0.5761719 l 5.435546,-5.1835937 c 0.46002,-0.4387278 0.572276,-1.0848648 0.375,-1.6113282 C 15.707023,1.4227554 15.167931,1 14.500002,1 H 1.5 C 0.83207057,1 0.29297839,1.4227554 0.09570312,1.9492187 -0.10157214,2.4756821 0.01068223,3.1218191 0.47070313,3.5605469 L 5.90625,8.7441406 c 0.024899,0.023747 0.085346,0.2609895 0.085937,0.5761719 L 6,13.75 9.2207,15.914063 C 9.5533093,16.137976 10.000966,15.899002 10,15.498047 M 8.9960938,14.558594 7,13.216797 6.9921875,9.3183594 C 6.9915694,8.9892608 7.0370426,8.4423955 6.5957031,8.0214844 L 1.1601562,2.8378906 C 0.98965295,2.6752794 0.96841532,2.4717256 1.0332031,2.2988281 1.0979909,2.1259306 1.2169582,2 1.5,2 h 13.000002 c 0.283041,0 0.402009,0.1259306 0.466796,0.2988281 0.06479,0.1728975 0.04355,0.3764513 -0.126953,0.5390625 L 9.4042985,8.0214844 C 8.962959,8.4423955 9.0084322,8.9892608 9.0078116,9.3183594",
                    Operation.New => "M 7.49979,0.999938 C 7.22367,1.0001 6.99995,1.22405 7.00008,1.50016 V 7.00008 H 1.50016 C 1.22405,6.99995 1.0001,7.22367 0.999938,7.49979 0.999877,7.63248 1.05256,7.75975 1.14638,7.85357 1.24021,7.9474 1.36748,8.00008 1.50016,8.00002 h 5.49992 v 5.49988 c -1.3e-4,0.2762 0.22359,0.5001 0.49971,0.5003 0.13269,0 0.25996,-0.0527 0.35378,-0.1465 0.09383,-0.0938 0.14651,-0.2211 0.14645,-0.3538 V 8.00002 h 5.49988 c 0.1327,6e-5 0.26,-0.05262 0.3538,-0.14645 C 13.9475,7.75975 14.0002,7.63248 14.0002,7.49979 14,7.22367 13.7761,6.99995 13.4999,7.00008 H 8.00002 V 1.50016 C 8.00008,1.36748 7.9474,1.24021 7.85357,1.14638 7.75975,1.05256 7.63248,0.999877 7.49979,0.999938 Z",
                    _ => "",
                };
            }
        }
        public double? Weight { get; set; }
        public bool Used { get; set; }
        public bool HasSeparator { get; set; }
        public string AltText {
            get
            {
                if (Weight != null)
                {
                    if (HasSeparator)
                    {
                        return $"{Name} {Weight}, priority 1";
                    }

                    return $"{Name} {Weight}";
                }
                else
                {
                    if (HasSeparator)
                    {
                        return $"{Name}, priority 1";
                    }

                    return Name;
                }
            }
        }
        public Visibility SeparatorVisibility {
            get { return HasSeparator ? Visibility.Visible : Visibility.Collapsed; }
        }
        public ObservableCollection<Item> Children { get; set; } = new ObservableCollection<Item>();

        public override string ToString()
        {
            return Name;
        }
    }
}
